name: Continuous Integration

on:
  pull_request:
    types: [assigned, opened, synchronize, reopened]

env:
  pat_token: ${{ secrets.REPO_ACCESS_TOKEN }}
  secret_name: XERO_TESTS_REFRESH_TOKENS
  XERO_TESTS_REFRESH_TOKENS: ${{ secrets.XERO_TESTS_REFRESH_TOKENS }}

jobs:
  pytest:
    runs-on: ubuntu-latest
    environment: CI Environment
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Bring up Services and test for token health
        run: |
          docker compose -f docker-compose-pipeline.yml build
          docker compose -f docker-compose-pipeline.yml up -d
          docker compose -f docker-compose-pipeline.yml exec -T api pytest tests/ --cov --cov-report=xml --cov-report=term-missing --cov-fail-under=85 --junit-xml=test-reports/report.xml | tee pytest-coverage.txt
          echo "STATUS=$(cat pytest-coverage.txt | grep 'Required test' | awk '{ print $1 }')" >> $GITHUB_ENV
          echo "FAILED=$(cat test-reports/report.xml | awk -F'=' '{print $5}' | awk -F' ' '{gsub(/"/, "", $1); print $1}')" >> $GITHUB_ENV
        env:
          API_URL: ${{ secrets.API_URL }}
          FYLE_BASE_URL: ${{ secrets.FYLE_BASE_URL }}
          FYLE_APP_URL: 'https://foo.foo.foo'
          FYLE_CLIENT_ID: ${{ secrets.FYLE_CLIENT_ID }}
          FYLE_CLIENT_SECRET: ${{ secrets.FYLE_CLIENT_SECRET }}
          FYLE_REFRESH_TOKEN: ${{ secrets.FYLE_REFRESH_TOKEN }}
          FYLE_TOKEN_URI: ${{ secrets.FYLE_TOKEN_URI }}
          FYLE_SERVER_URL: ${{ secrets.FYLE_SERVER_URL }}
          XERO_BASE_URL: ${{ secrets.XERO_BASE_URL }}
          XERO_REDIRECT_URI: ${{ secrets.XERO_REDIRECT_URI }}
          XERO_TOKEN_URI: ${{ secrets.XERO_TOKEN_URI }}

      - name: Pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@main
        if: ${{ always() && github.ref != 'refs/heads/master' }}
        with:
          create-new-comment: true
          junitxml-path: ./test-reports/report.xml
          pytest-coverage-path: ./pytest-coverage.txt

      - name: Perform coverage check
        shell: bash
        run: |
          set -o pipefail
          python -m pip install diff-cover

          git fetch origin master --depth=1
          diff-cover coverage.xml --compare-branch=origin/master --diff-range-notation .. --fail-under=98 > result.txt 2>&1

      - name: Comment coverage check
        if: always()
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: result.txt

      - name: Evaluate Coverage
        if: ${{ (env.STATUS == 'FAIL') || (env.FAILED > 0) }}
        run: exit 1