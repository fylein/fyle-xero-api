"""
Django settings for fyle_xero_api project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import os
import sys

import dj_database_url

from fyle_xero_api.sentry import Sentry

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get("DEBUG") == "True" else False

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS").split(",")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Installed Apps
    "rest_framework",
    "corsheaders",
    "fyle_rest_auth",
    "fyle_accounting_mappings",
    "fyle_integrations_imports",
    # User Created Apps
    "apps.users",
    "apps.workspaces",
    "apps.fyle",
    "apps.tasks",
    "apps.mappings",
    "apps.xero",
    "django_q",
]

MIDDLEWARE = [
    "request_logging.middleware.LoggingMiddleware",
    "fyle_xero_api.logging_middleware.ErrorHandlerMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsPostCsrfMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "fyle_xero_api.urls"
APPEND_SLASH = False

AUTH_USER_MODEL = "users.User"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

FYLE_REST_AUTH_SERIALIZERS = {
    "USER_DETAILS_SERIALIZER": "apps.users.serializers.UserSerializer"
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
        "apps.workspaces.permissions.WorkspacePermissions",
    ),
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "fyle_rest_auth.authentication.FyleJWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

WSGI_APPLICATION = "fyle_xero_api.wsgi.application"

SERVICE_NAME = os.environ.get("SERVICE_NAME")

Q_CLUSTER = {
    "name": "fyle_xero_api",
    # The number of tasks will be stored in django q tasks
    "save_limit": 100000,
    "retry": 14400,
    # 15 mins
    'timeout': 900,
    "catch_up": False,
    "workers": 4,
    # How many tasks are kept in memory by a single cluster.
    # Helps balance the workload and the memory overhead of each individual cluster
    "queue_limit": 10,
    "cached": False,
    "orm": "default",
    "ack_failures": True,
    "poll": 1,
    "max_attempts": 1,
    "attempt_count": 1,
    # The number of tasks a worker will process before recycling.
    # Useful to release memory resources on a regular basis.
    'recycle': os.environ.get('DJANGO_Q_RECYCLE', 50),
    # The maximum resident set size in kilobytes before a worker will recycle and release resources.
    # Useful for limiting memory usage.
    "max_rss": 100000,  # 100mb
    'ALT_CLUSTERS': {
        'import': {
            'retry': 14400,
            # 15 mins
            'timeout': 900,
        },
    }
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "{levelname} %s {asctime} {module} {message} " % SERVICE_NAME,
            "style": "{",
        },
        "requests": {
            "format": "request {levelname} %s {asctime} {message}" % SERVICE_NAME,
            "style": "{",
        },
    },
    "handlers": {
        "debug_logs": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "verbose",
        },
        "request_logs": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "requests",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["request_logs"],
            "propagate": True,
        },
        "django.request": {"handlers": ["request_logs"], "propagate": False},
        "fyle_xero_api": {
            "handlers": ["debug_logs"],
            "level": "ERROR",
            "propagate": False,
        },
        "apps": {"handlers": ["debug_logs"], "level": "ERROR", "propagate": False},
        "django_q": {
            "handlers": ["debug_logs"],
            "propagate": True,
        },
        "fyle_integrations_platform_connector": {
            "handlers": ["debug_logs"],
            "propagate": True,
        },
        "gunicorn": {
            "handlers": ["request_logs"],
            "level": "INFO",
            "propagate": False
        },
        "fyle_integrations_imports": {
            "handlers": ["debug_logs"],
            "propagate": True
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "auth_cache",
    }
}


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# Defaulting django engine for qcluster
if len(sys.argv) > 0 and sys.argv[1] == "qcluster":
    DATABASES = {"default": dj_database_url.config()}
else:
    DATABASES = {
        "default": dj_database_url.config(
            engine="django_db_geventpool.backends.postgresql_psycopg2"
        )
    }


DATABASES["cache_db"] = {"ENGINE": "django.db.backends.sqlite3", "NAME": "cache.db"}

DATABASE_ROUTERS = ["fyle_xero_api.cache_router.CacheRouter"]

FYLE_REST_AUTH_SETTINGS = {'async_update_user': True}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

# Fyle Settings
BRAND_ID = os.environ.get('BRAND_ID', 'fyle')
API_URL = os.environ.get("API_URL")
FYLE_TOKEN_URI = os.environ.get("FYLE_TOKEN_URI")
FYLE_CLIENT_ID = os.environ.get("FYLE_CLIENT_ID")
FYLE_CLIENT_SECRET = os.environ.get("FYLE_CLIENT_SECRET")
FYLE_BASE_URL = os.environ.get("FYLE_BASE_URL")
FYLE_APP_URL = os.environ.get("FYLE_APP_URL")
XERO_APP_URL = os.environ.get("APP_URL")
INTEGRATIONS_SETTINGS_API = os.environ.get('INTEGRATIONS_SETTINGS_API')
XERO_INTEGRATION_APP_URL = os.environ.get('XERO_INTEGRATION_APP_URL')
INTEGRATIONS_APP_URL = os.environ.get('INTEGRATIONS_APP_URL')

# XERO Settings
XERO_BASE_URL = os.environ.get("XERO_BASE_URL")
XERO_CLIENT_ID = os.environ.get("XERO_CLIENT_ID")
XERO_CLIENT_SECRET = os.environ.get("XERO_CLIENT_SECRET")
XERO_REDIRECT_URI = os.environ.get("XERO_REDIRECT_URI")
XERO_TOKEN_URI = os.environ.get("XERO_TOKEN_URI")


# Sendgrid Settings
SENDGRID_SANDBOX_MODE_IN_DEBUG = False

SENDGRID_API_KEY = os.environ.get("SENDGRID_KEY")
EMAIL = os.environ.get("SENDGRID_EMAIL")
EMAIL_BACKEND = "sendgrid_backend.SendgridBackend"


# Cache Settings
CACHE_EXPIRY = 3600

CORS_ORIGIN_ALLOW_ALL = True

# Sentry
Sentry.init()

CORS_ALLOW_HEADERS = ["sentry-trace", "authorization", "content-type"]
